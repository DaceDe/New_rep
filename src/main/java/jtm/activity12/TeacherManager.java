package jtm.activity12;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import org.springframework.stereotype.Component;


@Component
public class TeacherManager {

	public static void main(String[] args) {
		System.out.println(new TeacherManager().insertTeacher("Sven", "Does"));
	}

	protected Connection conn;

	public TeacherManager() {
		/*
		 * TODO When new TeacherManager is created, create connection to the
		 * database server:
		 * 
		 * Class.forName("com.mysql.jdbc.Driver"); conn =
		 * DriverManager.getConnection(
		 * "jdbc:mysql://localhost:3306/db?autoReconnect=true&useSSL=false&characterEncoding=utf8",
		 * "admin", "abcd1234" );
		 * 
		 * conn.setAutoCommit(false); //Use conn.commit() after each
		 * Insert/Update/Delete call
		 */
		try {
			Class.forName("com.mysql.jdbc.Driver");
			conn = DriverManager.getConnection(
					"jdbc:mysql://localhost:3306/db?autoReconnect=true&useSSL=false&characterEncoding=utf8", "admin",
					"abcd1234");
			conn.setAutoCommit(false);

		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/*
	 * Returns a Teacher instance represented by the specified ID.
	 */
	public Teacher findTeacher(int id) {
		try {
			Statement stmt = conn.createStatement();

			ResultSet rs = stmt.executeQuery("select * from Teacher WHERE Id=" + id);

			if (rs.first() == true) {
				id = rs.getInt(1);

				String firstName = rs.getString(2);

				String lastName = rs.getString(3);

				// System.out.println("ID = " + id + " first Name " + firstName
				// + " last Name " + lastName);

				Teacher teacher = new Teacher(id, firstName, lastName);
				return teacher;

			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		/*
		 * TODO Execute an SQL statement that searches teacher by ID. If teacher
		 * is found return Teacher object with values from DB If teacher is not
		 * found return nul
		 */
		return null;
	}

	/**
	 * Returns a list of Teacher objects.
	 */
	public List<Teacher> findTeacher(String firstName, String lastName) {
		try {
			Statement stmt = conn.createStatement();

			ResultSet fn = stmt.executeQuery(
					"select * from Teacher WHERE firstName='" + firstName + "' or lastName='" + lastName + "'");

			List<Teacher> teacherList = new ArrayList<Teacher>();

			while (fn.next() == true) {

				int nId = fn.getInt(1);
				firstName = fn.getString(2);
				lastName = fn.getString(3);

				Teacher teacher = new Teacher(nId, firstName, lastName);
				teacherList.add(teacher);

			}
			return teacherList;

		} catch (Exception e) {
			e.printStackTrace();
		}

		/*
		 * TODO Write an sql statement that searches teacher by first and last
		 * name and returns results as ArrayList<Teacher>. Result list should
		 * include all partial results as well, e.g. if first name is matching
		 * but last name is not still include, the teacher in result list, same
		 * applies for lastName If nothing is found return empty list!
		 */
		return null;
	}

	/**
	 * Insert an new teacher (first name and last name) into the table.
	 */
	public boolean insertTeacher(String firstName, String lastName) {
		try {
			PreparedStatement st = conn.prepareStatement("INSERT INTO Teacher (firstName,lastName) VALUES (?,?)");
			st.setString(1, firstName);
			st.setString(2, lastName);

			int rowsAffected = st.executeUpdate();
			conn.commit();

			return true;
		} catch (Exception e) {
			e.printStackTrace();
		}

		/*
		 * TODO Execute an SQL statement that inserts teacher in database. SQL
		 * statement should contain only firstName and lastName, ID should be
		 * automatically generated by DB
		 */

		return false;

	}

	/**
	 * Insert teacher object into database
	 */
	public boolean insertTeacher(Teacher teacher) {

		// int res = st.executeUpdate("insert into Teacher values (,'aa')");
		/*
		 * TODO Execute an SQL statement that inserts teacher in database. SQL
		 * statement should contain all fields: id, firstName and lastName If
		 * teacher is inserted successfully return true, otherwise false
		 */
		try {
			PreparedStatement st = conn.prepareStatement("insert into Teacher (id,firstName,lastName) values (?,?,?)");
			st.setInt(1, teacher.getId());
			st.setString(2, teacher.getFirstName());
			st.setString(3, teacher.getLastName());
			int rowsAffected = st.executeUpdate();
			conn.commit();
			if (rowsAffected == 1) {
				return true;
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return false;

	}

	/**
	 * Updates an existing Teacher in the repository with the values represented
	 * by the Teacher object.
	 */
	public boolean updateTeacher(Teacher teacher) {
		try {
			PreparedStatement stt = conn
					.prepareStatement("update Teacher set firstname = ?, lastName = ? where id = ?");
			stt.setInt(3, teacher.getId());
			stt.setString(1, teacher.getFirstName());
			stt.setString(2, teacher.getLastName());
			int rowsAffected = stt.executeUpdate();
			conn.commit();
			if (rowsAffected == 1) {
				return true;
			}
		} catch (Exception e) {
			e.printStackTrace();
		} /*
			 * TODO Execute an SQL statement that updates teacher information.
			 * Update teacher in database by it's ID If ONE teacher is
			 * successfully updated, return true, otherwise false
			 */

		return false;
	}

	public boolean deleteTeacher(int id) {
		/*
		 * TODO Execute an SQL statement that deletes teacher from database.
		 * Delete teacher by it's ID If one teacher is successfully deleted,
		 * return true If no teacher is deleted return false
		 */
		try {
			PreparedStatement stt = conn.prepareStatement("delete from Teacher where id = " + id);
			int rowsAffected = stt.executeUpdate();
			conn.commit();
			if (rowsAffected == 1) {
				return true;
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		return false;
	}

	public void closeConnection() {
		
		try{
			conn.close();
			conn=null;
		} catch (Exception e) {
			e.printStackTrace();
		}
		/*
		 * TODO Close connection to the database server and reset conn object to
		 * null
		 */
	}

}
